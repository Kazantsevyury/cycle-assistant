package com.example.menstrualcyclebot.service;

import com.example.menstrualcyclebot.domain.Cycle;
import com.example.menstrualcyclebot.domain.User;
import com.example.menstrualcyclebot.service.dbservices.UserService;
import com.example.menstrualcyclebot.utils.UserUtils;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import java.time.format.TextStyle;
import java.util.*;
import java.time.LocalDate;

@Service
@RequiredArgsConstructor
public class CalendarService {

    private final UserService userService;



    public InlineKeyboardMarkup getCalendar(int year, int month, long userChatId, Update update) {
        InlineKeyboardMarkup inlineKeyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        // –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
        List<InlineKeyboardButton> weekDaysRow = new ArrayList<>();
        weekDaysRow.add(createButton("–ü–Ω"));
        weekDaysRow.add(createButton("–í—Ç"));
        weekDaysRow.add(createButton("–°—Ä"));
        weekDaysRow.add(createButton("–ß—Ç"));
        weekDaysRow.add(createButton("–ü—Ç"));
        weekDaysRow.add(createButton("–°–±"));
        weekDaysRow.add(createButton("–í—Å"));
        keyboard.add(weekDaysRow);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –º–µ—Å—è—Ü–µ –∏ –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
        LocalDate firstDayOfMonth = LocalDate.of(year, month, 1);
        int daysInMonth = firstDayOfMonth.lengthOfMonth();
        int firstDayOfWeek = firstDayOfMonth.getDayOfWeek().getValue(); // 1 = –ü–Ω, 7 = –í—Å

        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ UserService
        Optional<User> optionalUser = userService.findById(userChatId);
        User user;

        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (!optionalUser.isPresent()) {
            user = UserUtils.createNewUser(update);  // –ò—Å–ø–æ–ª—å–∑—É–µ–º Update –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            userService.save(user);
        } else {
            user = optionalUser.get();
        }

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ü–∏–∫–ª—ã –ø–æ –¥–∞—Ç–µ –Ω–∞—á–∞–ª–∞ –≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è (–±–æ–ª–µ–µ –Ω–æ–≤—ã–µ –≤ –Ω–∞—á–∞–ª–µ)
        List<Cycle> sortedCycles = new ArrayList<>(user.getCycles());
        sortedCycles.sort(Comparator.comparing(Cycle::getStartDate).reversed());

        // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–Ω—è
        int currentDay = 1;

        // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–Ω–µ–π –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
        for (int i = 0; i < 6; i++) {  // 6 —Å—Ç—Ä–æ–∫ - –º–∞–∫—Å–∏–º—É–º –¥–ª—è –º–µ—Å—è—Ü–∞
            List<InlineKeyboardButton> row = new ArrayList<>();

            for (int j = 1; j <= 7; j++) {
                if (i == 0 && j < firstDayOfWeek) {
                    // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ –≤ –Ω–∞—á–∞–ª–µ –º–µ—Å—è—Ü–∞
                    row.add(createButton(" "));
                } else if (currentDay <= daysInMonth) {
                    String dayText = String.valueOf(currentDay);

                    // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å —Ü–∏–∫–ª—ã, –¥–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ —Ç–æ–ª—å–∫–æ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Ü–∏–∫–ª–∞
                    for (Cycle cycle : sortedCycles) {
                        String emoji = getEmojiForDay(cycle, year, month, currentDay);
                        if (!emoji.isEmpty()) {
                            dayText += emoji;
                            break; // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –Ω–∞—à–ª–∏ —ç–º–æ–¥–∑–∏ –¥–ª—è —Å–∞–º–æ–≥–æ –Ω–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
                        }
                    }

                    row.add(createButton(dayText));
                    currentDay++;
                } else {
                    // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ –≤ –∫–æ–Ω—Ü–µ –º–µ—Å—è—Ü–∞
                    row.add(createButton(" "));
                }
            }

            keyboard.add(row);
            if (currentDay > daysInMonth) {
                break;  // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º, –µ—Å–ª–∏ –≤—Å–µ –¥–Ω–∏ –º–µ—Å—è—Ü–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã
            }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥" –∏ "–≤–ø–µ—Ä–µ–¥" –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ—Å—è—Ü–∞
        List<InlineKeyboardButton> navigationRow = new ArrayList<>();
        navigationRow.add(createNavigationButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", year, month - 1));
        navigationRow.add(createNavigationButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", year, month + 1));
        keyboard.add(navigationRow);

        // –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞
        LocalDate today = LocalDate.now();
        String monthName = today.getMonth().getDisplayName(TextStyle.FULL, new Locale("ru"));
        String todayText = String.format("–°–µ–≥–æ–¥–Ω—è: %d, %s", today.getDayOfMonth(), monthName);

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π
        List<InlineKeyboardButton> todayRow = new ArrayList<>();
        todayRow.add(createButton(todayText));
        keyboard.add(todayRow);

        inlineKeyboardMarkup.setKeyboard(keyboard);
        return inlineKeyboardMarkup;
    }

    private String getEmojiForDay(Cycle cycle, int year, int month, int day) {
        LocalDate date = LocalDate.of(year, month, day); // –î–∞—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –≤ —Ä–∞–º–∫–∏ —Ü–∏–∫–ª–∞
        if (cycle.getStartDate() != null && !date.isBefore(cycle.getStartDate())) {

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏—é
            LocalDate periodEndDate = cycle.getStartDate().plusDays(cycle.getPeriodLength() - 1);
            if (!date.isAfter(periodEndDate)) {
                return " üíß"; // –ú–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏—è
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–æ–ª–ª–∏–∫—É–ª—è—Ä–Ω—É—é —Ñ–∞–∑—É
            if (cycle.getFollicularPhaseStart() != null && cycle.getOvulationDate() != null &&
                    !date.isBefore(cycle.getFollicularPhaseStart()) && date.isBefore(cycle.getOvulationDate())) {
                return " üëÑ"; // –§–æ–ª–ª–∏–∫—É–ª—è—Ä–Ω–∞—è —Ñ–∞–∑–∞
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–µ—Ä—Ç–∏–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–µ—Ä—Ç–∏–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            if (cycle.getFertileWindowStartDay() != null && cycle.getFertileWindowEndDay() != null) {
                LocalDate fertileWindowStartDate = cycle.getStartDate().plusDays(cycle.getFertileWindowStartDay() - 1);
                LocalDate fertileWindowEndDate = cycle.getStartDate().plusDays(cycle.getFertileWindowEndDay() - 1);
                if (!date.isBefore(fertileWindowStartDate) && !date.isAfter(fertileWindowEndDate)) {
                    return " üåï"; // –§–µ—Ä—Ç–∏–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                }
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–µ–Ω—å –æ–≤—É–ª—è—Ü–∏–∏
            if (cycle.getOvulationDate() != null && date.isEqual(cycle.getOvulationDate())) {
                return " üå∑"; // –î–µ–Ω—å –æ–≤—É–ª—è—Ü–∏–∏
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ª—é—Ç–µ–∏–Ω–æ–≤—É—é —Ñ–∞–∑—É
            if (cycle.getLutealPhaseStart() != null && cycle.getLutealPhaseEnd() != null &&
                    !date.isBefore(cycle.getLutealPhaseStart()) && !date.isAfter(cycle.getLutealPhaseEnd())) {
                return " ü´Ç"; // –õ—é—Ç–µ–∏–Ω–æ–≤–∞—è —Ñ–∞–∑–∞
            }
        }


        // –î–µ–Ω—å –±–µ–∑ —Ñ–∞–∑—ã
        return "";
    }




    private InlineKeyboardButton createButton(String text) {
        InlineKeyboardButton button = new InlineKeyboardButton();
        button.setText(text);
        button.setCallbackData(text); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–æ–≤
        return button;
    }

    private InlineKeyboardButton createNavigationButton(String text, int year, int month) {
        if (month < 1) {
            month = 12;
            year -= 1;
        } else if (month > 12) {
            month = 1;
            year += 1;
        }
        InlineKeyboardButton button = new InlineKeyboardButton();
        button.setText(text);
        button.setCallbackData("navigate:" + year + ":" + month);
        return button;
    }
}
