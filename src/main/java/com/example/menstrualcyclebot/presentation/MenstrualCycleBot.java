package com.example.menstrualcyclebot.presentation;

import com.example.menstrualcyclebot.domain.MenstrualCycle;
import com.example.menstrualcyclebot.domain.User;
import com.example.menstrualcyclebot.repository.CycleRepository;
import com.example.menstrualcyclebot.repository.UserRepository;
import com.example.menstrualcyclebot.utils.UserState;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.DefaultBotOptions;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import com.example.menstrualcyclebot.utils.CycleCalculator;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.*;

import static com.example.menstrualcyclebot.utils.UIUtils.createMenuKeyboard;
import static com.example.menstrualcyclebot.utils.UIUtils.welcomeKeyboard;


@Slf4j
@Component
public class MenstrualCycleBot extends TelegramLongPollingBot {

    private final String botToken;
    private final String botUsername;
    private final UserRepository userRepository;
    private final CycleRepository cycleRepository;
    private final Map<Long, MenstrualCycle> dataEntrySessions = new HashMap<>();
    private final Map<Long, UserState> userStates = new HashMap<>();
    private final Map<Long, MenstrualCycle> partialCycleData = new HashMap<>();


    @Autowired
    public MenstrualCycleBot(String botToken, String botUsername, UserRepository userRepository, CycleRepository cycleRepository) {
        super(new DefaultBotOptions(), botToken);
        this.botToken = botToken;
        this.botUsername = botUsername;
        this.userRepository = userRepository;
        this.cycleRepository = cycleRepository;
    }
    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            String messageText = update.getMessage().getText();
            long chatId = update.getMessage().getChatId();

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
            if (userStates.containsKey(chatId) && userStates.get(chatId) != UserState.NONE) {
                handleDataEntrySteps(chatId, messageText);
                return;
            }

            // –ò–Ω–∞—á–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
            switch (messageText) {
                case "/start":
                    // –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é
                    sendMessageWithKeyboard(chatId, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –Ω–∏–∂–µ:", welcomeKeyboard());
                    break;
                case "‚ÑπÔ∏è info":
                    handleInfo(chatId);
                    break;
                case "‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ":
                    handleDataEntry(chatId);
                    break;
                case "üí° –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é":
                    handleRecommendation(chatId);
                    break;
                case "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
                    handleStatistics(chatId);
                    break;
                case "üìÖ –¢–µ–∫—É—â–∏–π –¥–µ–Ω—å —Ü–∏–∫–ª–∞":
                    handleCurrentDay(chatId);
                    break;
                case "üë§ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è":
                    handleProfileSettings(chatId);
                    break;
                case "üîî –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è":
                    handleNotificationSettings(chatId);
                    break;
                case "üìÜ –ö–∞–ª–µ–Ω–¥–∞—Ä—å":
                    handleCalendar(chatId);
                    break;
                case "üîÑ –ù–æ–≤—ã–π —Ü–∏–∫–ª":
                    handleNewCycle(chatId);
                    break;
                default:
                    sendMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
            }
        }
    }

    // –ó–∞–≥–ª—É—à–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π
    private void handleInfo(long chatId) {
        sendMessage(chatId, "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ.");
        // –í–æ–∑–≤—Ä–∞—Ç –∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–º—É –º–µ–Ω—é
        sendMessageWithKeyboard(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –Ω–∏–∂–µ:", welcomeKeyboard());
    }

    private void handleDataEntry(long chatId) {
        userStates.put(chatId, UserState.AWAITING_CYCLE_LENGTH);
        partialCycleData.put(chatId, new MenstrualCycle());
        sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∞—à–µ–≥–æ —Ü–∏–∫–ª–∞ (–≤ –¥–Ω—è—Ö):");
    }
    private void handleDataEntrySteps(long chatId, String messageText) {
        UserState currentState = userStates.get(chatId);
        MenstrualCycle cycle = partialCycleData.get(chatId);

        try {
            switch (currentState) {
                case AWAITING_CYCLE_LENGTH:
                    int cycleLength = Integer.parseInt(messageText);
                    cycle.setCycleLength(cycleLength);
                    userStates.put(chatId, UserState.AWAITING_PERIOD_LENGTH);
                    sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏–∏ (–≤ –¥–Ω—è—Ö):");
                    break;

                case AWAITING_PERIOD_LENGTH:
                    int periodLength = Integer.parseInt(messageText);
                    cycle.setPeriodLength(periodLength);
                    userStates.put(chatId, UserState.AWAITING_START_DATE);
                    sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ü–∏–∫–ª–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î):");
                    break;

                case AWAITING_START_DATE:
                    LocalDate startDate = LocalDate.parse(messageText);
                    cycle.setStartDate(startDate);

                    // –ó–∞–≤–µ—Ä—à–∞–µ–º –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
                    userStates.put(chatId, UserState.NONE);

                    // –°–≤—è–∑—ã–≤–∞–µ–º —Ü–∏–∫–ª —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                    User user = userRepository.findById(chatId).orElseGet(() -> {
                        User newUser = new User();
                        newUser.setChatId(chatId);
                        return userRepository.save(newUser);
                    });
                    cycle.setUser(user);

                    CycleCalculator.calculateCycleFields(cycle);

                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–∏–∫–ª –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
                    cycleRepository.save(cycle);

                    sendMessage(chatId, "–°–ø–∞—Å–∏–±–æ! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.");
                    sendMessageWithKeyboard(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –º–µ–Ω—é:", createMenuKeyboard());

                    // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    partialCycleData.remove(chatId);
                    break;

                default:
                    sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
                    userStates.put(chatId, UserState.NONE);
                    partialCycleData.remove(chatId);
                    break;
            }
        } catch (NumberFormatException e) {
            sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.");
        } catch (DateTimeParseException e) {
            sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î.");
        } catch (Exception e) {
            sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void handleRecommendation(long chatId) {
        sendMessage(chatId, "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.");
        // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        sendMessageWithKeyboard(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –º–µ–Ω—é:", createMenuKeyboard());
    }

    private void handleStatistics(long chatId) {
        sendMessage(chatId, "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è: –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.");
        // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        sendMessageWithKeyboard(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –º–µ–Ω—é:", createMenuKeyboard());
    }

    private void handleCurrentDay(long chatId) {
        sendMessage(chatId, "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è: –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å —Ü–∏–∫–ª–∞.");
        // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        sendMessageWithKeyboard(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –º–µ–Ω—é:", createMenuKeyboard());
    }

    private void handleProfileSettings(long chatId) {
        sendMessage(chatId, "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è.");
        // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        sendMessageWithKeyboard(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –º–µ–Ω—é:", createMenuKeyboard());
    }

    private void handleNotificationSettings(long chatId) {
        sendMessage(chatId, "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.");
        // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        sendMessageWithKeyboard(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –º–µ–Ω—é:", createMenuKeyboard());
    }

    private void handleCalendar(long chatId) {
        sendMessage(chatId, "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è: –û—Ç–∫—Ä—ã—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å.");
        // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        sendMessageWithKeyboard(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –º–µ–Ω—é:", createMenuKeyboard());
    }

    private void handleNewCycle(long chatId) {
        sendMessage(chatId, "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è: –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ü–∏–∫–ª.");
        // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        sendMessageWithKeyboard(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –º–µ–Ω—é:", createMenuKeyboard());
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    private void sendMessage(long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(text);
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    private void sendMessageWithKeyboard(long chatId, String text, ReplyKeyboardMarkup keyboardMarkup) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(text);
        message.setReplyMarkup(keyboardMarkup);
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    @Override
    public String getBotUsername() {
        return botUsername;
    }

    @Override
    public String getBotToken() {
        return botToken;
    }
}