package com.example.menstrualcyclebot.presentation;

import com.example.menstrualcyclebot.domain.Cycle;
import com.example.menstrualcyclebot.domain.User;
import com.example.menstrualcyclebot.service.CalendarService;
import com.example.menstrualcyclebot.service.StatisticsService;
import com.example.menstrualcyclebot.service.UserEditService;
import com.example.menstrualcyclebot.service.sbservices.CycleService;
import com.example.menstrualcyclebot.service.sbservices.DatabaseService;
import com.example.menstrualcyclebot.service.sbservices.UserCycleManagementService;
import com.example.menstrualcyclebot.service.sbservices.UserService;
import com.example.menstrualcyclebot.utils.UserState;
import com.example.menstrualcyclebot.utils.UserUtils;
import jakarta.annotation.PreDestroy;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.send.SendPhoto;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.InputFile;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboard;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import com.example.menstrualcyclebot.utils.CycleCalculator;

import java.io.File;
import java.io.IOException;
import java.time.LocalDate;
import java.time.format.DateTimeParseException;
import java.util.*;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

import static com.example.menstrualcyclebot.utils.UIUtils.createMenuKeyboard;

@Component
public class Bot extends TelegramLongPollingBot {

    private final String botToken;
    private final String botUsername;

    private final UserService userService;
    private final CycleService cycleService;
    private final UserCycleManagementService userCycleManagementService;

    private final CalendarService calendarService;
    private final DatabaseService databaseService;
    private final CycleCalculator cycleCalculator;
    private final UserEditService userEditService;
    private final StatisticsService statisticsService;


    private final ExecutorService executorService = Executors.newFixedThreadPool(10); // –ù–∞—Å—Ç—Ä–æ–π –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤

    private final Map<Long, Cycle> dataEntrySessions = new HashMap<>();
    private final Map<Long, UserState> userStates = new HashMap<>();


    private final Map<Long, Cycle> partialCycleData = new HashMap<>();

    // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–µ–º –ø–æ–ª–µ–π
    public Bot(
            @Value("${telegram.bot.token}") String botToken,
            @Value("${telegram.bot.username}") String botUsername,
            UserService userService,
            CycleService cycleService,
            UserCycleManagementService userCycleManagementService,
            CalendarService calendarService,
            DatabaseService databaseService,
            CycleCalculator cycleCalculator,
            UserEditService userEditService,
            StatisticsService statisticsService) {
        this.botToken = botToken;
        this.botUsername = botUsername;
        this.userService = userService;  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—è userService
        this.cycleService = cycleService;  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—è cycleService
        this.userCycleManagementService = userCycleManagementService;  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—è userCycleManagementService
        this.calendarService = calendarService;  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—è calendarService
        this.databaseService = databaseService;  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—è databaseService
        this.cycleCalculator = cycleCalculator;  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—è cycleCalculator
        this.userEditService = userEditService;  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—è userEditService
        this.statisticsService = statisticsService;  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—è statisticsService
    }


    private void processUpdate(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            handleIncomingMessage(update);
        } else if (update.hasCallbackQuery()) {
            handleCallback(update.getCallbackQuery());
        }
    }

    @Override
    public void onUpdateReceived(Update update) {
        executorService.submit(() -> processUpdate(update)); // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ –∞–ø–¥–µ–π—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    }

    public void handleIncomingMessage(Update update) {
        long chatId = update.getMessage().getChatId();
        String messageText = update.getMessage().getText();

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
            if (userStates.containsKey(chatId) && userStates.get(chatId) != UserState.NONE) {
                handleDataEntrySteps(update, messageText);
                return;
            }

            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è
            if (userStates.containsKey(chatId) && userStates.get(chatId) == UserState.AWAITING_SALUTATION) {
                updateSalutation(chatId, messageText.trim()); // –í—ã–∑–æ–≤ –Ω–æ–≤–æ–≥–æ –º–µ—Ç–æ–¥–∞
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            if (!userService.existsById(chatId)) {
                User newUser = UserUtils.createNewUser(update);
                userService.save(newUser);
            }

            // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            Optional<User> optionalUser = userService.findById(chatId);
            User user = optionalUser.orElseThrow(() -> new IllegalStateException("User not found for chatId: " + chatId));
            String salutation = user.getSalutation() != null ? user.getSalutation() : user.getName();

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
            switch (messageText) {
                case "/start":
                    sendMessageWithKeyboard(chatId, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –Ω–∞—á–∞–ª–∞.", createMenuKeyboard());
                    break;
                case "‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ":
                    handleDataEntry(chatId);
                    sendMessage(chatId, "–•–æ—Ä–æ—à–æ, " + salutation + ", –ø—Ä–∏—Å—Ç—É–ø–∏–º –∫ –≤–≤–æ–¥—É –¥–∞–Ω–Ω—ã—Ö.");
                    break;
                case "üí° –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é":
                    handleRecommendation(chatId);
                    break;
                case "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
                    handleStatistics(chatId);
                    break;
                case "üìÖ –¢–µ–∫—É—â–∏–π –¥–µ–Ω—å —Ü–∏–∫–ª–∞":
                    handleCurrentDay(chatId);
                    break;
                case "üë§ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è":
                    handleProfileSettings(chatId);
                    break;
                case "üîî –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è":
                    handleNotificationSettings(chatId);
                    break;
                case "üìÜ –ö–∞–ª–µ–Ω–¥–∞—Ä—å":
                    handleCalendar(chatId);
                    break;
                case "üîÑ –ù–æ–≤—ã–π —Ü–∏–∫–ª":
                    handleNewCycle(chatId);
                    break;
                case "–£–¥–∞–ª–∏—Ç—å –±–∞–∑—É":
                    deleteAllData(chatId);
                    break;
                default:
                    sendMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, " + salutation + ". –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
            }
        } catch (Exception e) {
            sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.");
        }
    }

    public void deleteAllData(long chatId) {
        try {
            databaseService.deleteAllData();
            sendMessage(chatId, "–ë–∞–∑–∞ —Å—Ç–µ—Ä—Ç–∞");
            sendMessageWithKeyboard(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –Ω–∏–∂–µ:", createMenuKeyboard());
        } catch (Exception e) {
            sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.");
        }
    }

    public void handleDataEntry(long chatId) {
        userStates.put(chatId, UserState.AWAITING_CYCLE_LENGTH);
        partialCycleData.put(chatId, new Cycle());
        sendMessage(chatId, "Please enter your cycle length (in days):");
    }
    @Transactional
    public void handleDataEntrySteps(Update update, String messageText) {
        long chatId = update.getMessage().getChatId();
        UserState currentState = userStates.get(chatId);
        Cycle cycle = partialCycleData.get(chatId);


        try {
            switch (currentState) {
                case AWAITING_CYCLE_LENGTH:
                    processCycleLength(chatId, messageText, cycle);
                    break;
                case AWAITING_PERIOD_LENGTH:
                    processPeriodLength(chatId, messageText, cycle);
                    break;
                case AWAITING_START_DATE:
                    processStartDate(chatId, messageText, cycle);
                    break;
                default:
                    handleUnexpectedState(chatId, currentState);
                    break;
            }
        } catch (NumberFormatException e) {
            sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.");
        } catch (DateTimeParseException e) {
            sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î.");
        } catch (Exception e) {
            sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
            clearUserData(chatId);
        }
    }

    public void processCycleLength(long chatId, String messageText, Cycle cycle) {
        int cycleLength = Integer.parseInt(messageText);
        if (cycleLength <= 0) {
            sendMessage(chatId, "–î–ª–∏–Ω–∞ —Ü–∏–∫–ª–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:");
            return;
        }
        cycle.setCycleLength(cycleLength);
        userStates.put(chatId, UserState.AWAITING_PERIOD_LENGTH);
        sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É –≤–∞—à–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ (–≤ –¥–Ω—è—Ö):");
    }

    public void processPeriodLength(long chatId, String messageText, Cycle cycle) {
        int periodLength = Integer.parseInt(messageText);
        if (periodLength <= 0) {
            sendMessage(chatId, "–î–ª–∏–Ω–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:");
            return;
        }
        cycle.setPeriodLength(periodLength);
        userStates.put(chatId, UserState.AWAITING_START_DATE);
        sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –≤–∞—à–µ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ü–∏–∫–ª–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î):");
    }

    public void processStartDate(long chatId, String messageText, Cycle cycle) {
        LocalDate startDate = LocalDate.parse(messageText);
        if (startDate.isAfter(LocalDate.now())) {
            sendMessage(chatId, "–î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É:");
            return;
        }
        cycle.setStartDate(startDate);
        completeDataEntry(chatId, cycle);
    }

    public void completeDataEntry(long chatId, Cycle cycle) {
        try {
            userStates.put(chatId, UserState.NONE);

            Optional<User> optionalUser = userService.findById(chatId);
            if (optionalUser.isPresent()) {
                cycle.setUser(optionalUser.get());
            } else {
                throw new IllegalStateException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è chatId: " + chatId);
            }
            cycleCalculator.calculateCycleFields(cycle);
            cycleService.save(cycle);

            sendMessage(chatId, "–°–ø–∞—Å–∏–±–æ! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.");
            sendMessageWithKeyboard(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é:", createMenuKeyboard());

            partialCycleData.remove(chatId);
        } catch (Exception e) {
            sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
    }

    public void handleUnexpectedState(long chatId, UserState currentState) {
        sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é.");
        userStates.put(chatId, UserState.NONE);
    }

    public void clearUserData(long chatId) {
        userStates.remove(chatId);
        partialCycleData.remove(chatId);
    }

    public void handleRecommendation(long chatId) {
        sendMessageWithKeyboard(chatId, "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.", createMenuKeyboard());
    }

    public void handleStatistics(long chatId) {

        try {
            // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
            String chartFilePath = statisticsService.createLineChart(chatId);

            // –û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            SendPhoto sendPhoto = new SendPhoto();
            sendPhoto.setChatId(String.valueOf(chatId));
            sendPhoto.setPhoto(new InputFile(new File(chartFilePath)));
            execute(sendPhoto);

        } catch (IOException e) {
            sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.");
        } catch (TelegramApiException e) {
        }
    }


    public void handleCurrentDay(long chatId) {
        Optional<User> optionalUser = userService.findById(chatId);

        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ü–∏–∫–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        List<Cycle> cycles = optionalUser
                .map(User::getCycles)
                .orElse(Collections.emptyList());

        try {
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ü–∏–∫–ª
            Cycle actualCycle = cycleService.getActualCycle(cycles);

            // –í—ã—á–∏—Å–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å —Ü–∏–∫–ª–∞
            LocalDate today = LocalDate.now();
            int currentDay = (int) (today.toEpochDay() - actualCycle.getStartDate().toEpochDay()) + 1;

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —Ç–µ–∫—É—â–∏–º –¥–Ω–µ–º —Ü–∏–∫–ª–∞
            sendMessageWithKeyboard(chatId, "–°–µ–≥–æ–¥–Ω—è: " + currentDay + " –¥–µ–Ω—å —Ü–∏–∫–ª–∞.", createMenuKeyboard());

        } catch (IllegalArgumentException e) {
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤ –Ω–µ—Ç
            sendMessageWithKeyboard(chatId, e.getMessage(), createMenuKeyboard());
        }
    }


    public void handleProfileSettings(long chatId) {

        // –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
        InlineKeyboardMarkup keyboard = userEditService.getUserEditor(chatId);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        sendMessageWithKeyboard(chatId, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è: " , keyboard);
    }
    public void updateSalutation(long chatId, String newSalutation) {
        Optional<User> userOptional = userService.findById(chatId);

        if (userOptional.isPresent()) {
            User user = userOptional.get();
            user.setSalutation(newSalutation);

            try {
                userService.save(user); // –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
                userStates.put(chatId, UserState.NONE); // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
                InlineKeyboardMarkup updatedKeyboard = userEditService.getUserEditor(chatId);
                sendMessageWithKeyboard(chatId, "–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.", updatedKeyboard);
            } catch (Exception e) {
                sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: " + e.getMessage());
            }

        } else {
            sendMessage(chatId, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        }
    }


    private void handleNotificationSettings(long chatId) {
        sendMessageWithKeyboard(chatId, "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.", createMenuKeyboard());
    }

    @Transactional
    public void handleCalendar(long chatId) {
        try {
            sendMessage(chatId, "–í–∞—à –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ –æ–∫—Ç—è–±—Ä—å:");
            sendMessageWithKeyboard(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –Ω–∏–∂–µ:", calendarService.getCalendar(2024, 10, chatId));
        } catch (Exception e) {
            sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.");
        }
    }
    public void handleCallback(CallbackQuery callbackQuery) {
        String callbackData = callbackQuery.getData();
        long chatId = callbackQuery.getMessage().getChatId();

        try {
             if (callbackData.equals("edit_salutation")) {
                userStates.put(chatId, UserState.AWAITING_SALUTATION); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ:"); // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ

        } else if (callbackData.startsWith("navigate:")) {
                String[] data = callbackData.split(":");
                int year = Integer.parseInt(data[1]);
                int month = Integer.parseInt(data[2]);


                EditMessageText editMessage = new EditMessageText();
                editMessage.setChatId(String.valueOf(chatId));
                editMessage.setMessageId(callbackQuery.getMessage().getMessageId());
                editMessage.setText("–ö–∞–ª–µ–Ω–¥–∞—Ä—å:");
                editMessage.setReplyMarkup(calendarService.getCalendar(year, month, chatId));

                execute(editMessage);
            }
            else {
                sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
            }
        } catch (NumberFormatException e) {
            sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
        } catch (Exception e) {
            sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.");
        }
    }


    public void handleNewCycle(long chatId) {
        sendMessageWithKeyboard(chatId, "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è: –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ü–∏–∫–ª.", createMenuKeyboard());
    }

    public void sendMessage(long chatId, String text) {
        sendMessageWithKeyboard(chatId, text, null);
    }

    public void sendMessageWithKeyboard(long chatId, String text, ReplyKeyboard keyboardMarkup) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(text);
        if (keyboardMarkup != null) {
            message.setReplyMarkup(keyboardMarkup);
        }
        try {
            execute(message);
        } catch (TelegramApiException e) {
        }
    }

    @Override
    public String getBotUsername() {
        return botUsername;
    }

    @Override
    public String getBotToken() {
        return botToken;
    }

    @PreDestroy
    public void shutDown() {
        executorService.shutdown();  // –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ ExecutorService
        try {
            if (!executorService.awaitTermination(60, TimeUnit.SECONDS)) {
                executorService.shutdownNow();  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ, –µ—Å–ª–∏ –¥–æ–ª–≥–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è
            }
        } catch (InterruptedException e) {
            executorService.shutdownNow();
        }
    }
}
