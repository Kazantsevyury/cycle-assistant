package com.example.menstrualcyclebot.presentation;

import com.example.menstrualcyclebot.domain.Cycle;
import com.example.menstrualcyclebot.domain.CycleStatus;
import com.example.menstrualcyclebot.domain.User;
import com.example.menstrualcyclebot.service.CalendarService;
import com.example.menstrualcyclebot.service.StatisticsService;
import com.example.menstrualcyclebot.service.UserEditService;
import com.example.menstrualcyclebot.service.dbservices.*;
import com.example.menstrualcyclebot.state.*;
import com.example.menstrualcyclebot.utils.CycleCalculator;
import com.example.menstrualcyclebot.utils.UserUtils;
import jakarta.annotation.PreDestroy;
import lombok.Data;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboard;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.time.LocalDate;
import java.util.*;
import java.util.stream.Collectors;

import static com.example.menstrualcyclebot.utils.UIUtils.*;

@Slf4j
@Component
@Data
public class Bot extends TelegramLongPollingBot {

    private final String botToken;
    private final String botUsername;

    private final UserService userService;
    private final CycleService cycleService;
    private final UserCycleManagementService userCycleManagementService;
    private final CalendarService calendarService;
    private final DatabaseService databaseService;
    private final CycleCalculator cycleCalculator;
    public final UserEditService userEditService;
    private final StatisticsService statisticsService;
    private final CycleRecalculationService cycleRecalculationService; // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ—Å—á—ë—Ç —Ü–∏–∫–ª–æ–≤

    private final Map<Long, UserStateHandler> userStates = new HashMap<>();
    private final Map<Long, Cycle> partialCycleData = new HashMap<>();

    /**
     * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞ —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏.
     *
     * @param botToken –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –¥–ª—è Telegram API.
     * @param botUsername –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ—Ç–∞ –≤ Telegram.
     * @param userService –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.
     * @param cycleService –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ü–∏–∫–ª–∞–º–∏.
     * @param userCycleManagementService –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ü–∏–∫–ª–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
     * @param calendarService –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º.
     * @param databaseService –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.
     * @param cycleCalculator –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ü–∏–∫–ª–æ–≤.
     * @param userEditService –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
     * @param statisticsService –°–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
     */
    public Bot(
            @Value("${telegram.bot.token}") String botToken,
            @Value("${telegram.bot.username}") String botUsername,
            UserService userService,
            CycleService cycleService,
            UserCycleManagementService userCycleManagementService,
            CalendarService calendarService,
            DatabaseService databaseService,
            CycleCalculator cycleCalculator,
            UserEditService userEditService,
            StatisticsService statisticsService, CycleRecalculationService cycleRecalculationService) {
        this.botToken = botToken;
        this.botUsername = botUsername;
        this.userService = userService;
        this.cycleService = cycleService;
        this.userCycleManagementService = userCycleManagementService;
        this.calendarService = calendarService;
        this.databaseService = databaseService;
        this.cycleCalculator = cycleCalculator;
        this.userEditService = userEditService;
        this.statisticsService = statisticsService;
        this.cycleRecalculationService = cycleRecalculationService;
    }

    /**
     * –ú–µ—Ç–æ–¥, –≤—ã–∑—ã–≤–∞–µ–º—ã–π –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram API.
     *
     * @param update –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
     */
    @Override
    public void onUpdateReceived(Update update) {
        processUpdate(update); // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
     *
     * @param update –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
     */
    public void processUpdate(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            handleIncomingMessage(update);
        } else if (update.hasCallbackQuery()) {
            handleCallback(update.getCallbackQuery());
        }
    }

    public void handleIncomingMessage(Update update) {
        long chatId = update.getMessage().getChatId();
        String messageText = update.getMessage().getText();

        log.debug("Handling incoming message '{}' from chatId {}", messageText, chatId);

        try {
            if (isMainCommand(messageText)) {
                partialCycleData.remove(chatId);
                log.info("Cleared temporary data for chatId {}", chatId);
                userStates.put(chatId, new NoneState());
                log.info("Reset user state to NoneState for chatId {}", chatId);

                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
                switch (messageText) {
                    case "/start":
                        handleStartCommand(chatId, update);
                        break;
                    case "‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ":
                        sendMessageWithKeyboard(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö:", createDataEntryChoiceKeyboard());
                        log.info("Data entry choice sent to chatId {}", chatId);
                        break;
                    case "‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ":
                        handleHistoricalCycleData(chatId);
                        log.info("Started handling historical cycle data for chatId {}", chatId);
                        break;
                    case "–ó–∞–∫–æ–Ω—á–∏—Ç—å –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö":
                        sendMessageWithKeyboard(chatId,"–î–∞–Ω–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Ü–∏–∫–ª–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.",createMenuKeyboard());
                        break;
                    case "üë§ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è":
                        handleProfileSettings(chatId);
                        log.info("Handled profile settings for chatId {}", chatId);
                        break;
                    case "–í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ü–∏–∫–ª–∞":
                        handleActiveCycleDataEntry(chatId);
                        break;
                    case "üîÑ –ù–æ–≤—ã–π —Ü–∏–∫–ª":
                        handleNewCycle(chatId);
                        break;
                    case "r":
                        handleRecalculationCommand(chatId);
                        break;
                    case "üìÜ –ö–∞–ª–µ–Ω–¥–∞—Ä—å":
                        handleCalendar(chatId);
                        break;
                    case "i":
                        List<Cycle> cycles = userService.findUserCyclesByChatId(chatId);

                        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —Ü–∏–∫–ª–æ–≤
                        String cyclesListMessage;
                        if (cycles.isEmpty()) {
                            cyclesListMessage = "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤.";
                        } else {
                            cyclesListMessage = "–í–∞—à–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ü–∏–∫–ª—ã:\n" +
                                    cycles.stream()
                                            .map(cycle -> String.format("‚Ä¢ –¶–∏–∫–ª —Å %s –ø–æ %s (%d –¥–Ω–µ–π)",
                                                    cycle.getStartDate(),
                                                    cycle.getEndDate(),
                                                    cycle.getCycleLength()))
                                            .collect(Collectors.joining("\n"));
                        }

                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ü–∏–∫–ª–æ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                        sendMessageWithKeyboard(chatId, cyclesListMessage, createMenuKeyboard());
                        break;
                    case "üìÖ –¢–µ–∫—É—â–∏–π –¥–µ–Ω—å —Ü–∏–∫–ª–∞":
                        handleCurrentDay(chatId);
                        break;
                    case "–í–≤–µ—Å—Ç–∏ –µ—â–µ –æ–¥–∏–Ω —Ü–∏–∫–ª":
                        handleHistoricalCycleData(chatId);
                        break;
                    case "–£–¥–∞–ª–∏—Ç—å –æ–¥–∏–Ω –∏–∑ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤":
                        promptCycleDeletion(chatId);
                        break;
                    case "d":
                        deleteAllData(chatId);
                        log.info("Deleted all data for chatId {}", chatId);
                        break;
                    case "–ù–∞–∑–∞–¥":
                        sendMessageWithKeyboard(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:", createMenuKeyboard());
                        break;
                    case "–î–∞, —É–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ü–∏–∫–ª":
                        Optional<Cycle> activeCycle = cycleService.findActiveOrDelayedCycleByChatId(chatId);
                        if (activeCycle.isPresent()) {
                            cycleService.deleteCycleById(activeCycle.get().getCycleId());
                            userStates.put(chatId, new NoneState());
                            partialCycleData.remove(chatId);
                            sendMessageWithKeyboard(chatId, "–ê–∫—Ç–∏–≤–Ω—ã–π —Ü–∏–∫–ª –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.", createMenuKeyboard());
                            log.info("Active cycle successfully deleted and user state reset for chatId {}", chatId);
                        } else {
                            sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.");
                            log.warn("No active cycle found for deletion in chatId {}", chatId);
                        }
                        break;
                    default:
                        sendMessageWithKeyboard(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é.", createMenuKeyboard());
                        log.warn("Unknown command '{}' received from chatId {}", messageText, chatId);
                        break;
                }
                return;
            }
            UserStateHandler currentState = userStates.get(chatId);

            if (currentState instanceof AwaitingHistoricalCycleDataState) {
                log.info("Entering AwaitingHistoricalCycleDataState for chatId {}", chatId);

                Cycle historicalCycle = partialCycleData.getOrDefault(chatId, new Cycle());

                currentState.handleState(this, update, historicalCycle);
                log.debug("AwaitingHistoricalCycleDataState handled for chatId {}", chatId);

                if (historicalCycle.getStartDate() != null && historicalCycle.getCycleLength() != 0 && historicalCycle.getPeriodLength() != 0) {
                    historicalCycle.setStatus(CycleStatus.COMPLETED);
                    cycleService.saveHistoricalCycle(historicalCycle);
                    partialCycleData.remove(chatId);
                    log.info("Historical cycle saved successfully for chatId {}", chatId);
                }

                partialCycleData.put(chatId, historicalCycle);
                return;
            }

            if (currentState != null && !(currentState instanceof NoneState)) {
                Cycle cycle = partialCycleData.getOrDefault(chatId, new Cycle());
                currentState.handleState(this, update, cycle);
                log.debug("State '{}' handled for chatId {}", currentState.getClass().getSimpleName(), chatId);

                if (cycle.getStartDate() != null && cycle.getCycleLength() != 0 && cycle.getPeriodLength() != 0) {
                    User user = userService.findById(chatId).orElseThrow(() -> new IllegalArgumentException("User not found"));
                    cycle.setUser(user);
                    cycleCalculator.calculateCycleFields(cycle);
                    cycle.setStatus(CycleStatus.ACTIVE);
                    cycleService.save(cycle);
                    partialCycleData.remove(chatId);
                    sendMessageWithKeyboard(chatId, "–í–∞—à —Ü–∏–∫–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!", createMenuKeyboard());
                    log.info("Cycle saved successfully for chatId {}", chatId);
                }

                partialCycleData.put(chatId, cycle);
                return;
            }else {
                log.error("Exception while handling incoming message '{}' from chatId {}", messageText, chatId);
                sendMessageWithKeyboard(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é.", createMenuKeyboard());


            }
        } catch (Exception e) {
            log.error("Exception while handling incoming message '{}' from chatId {}", messageText, chatId, e);
            sendMessageWithKeyboard(chatId, "", createMenuKeyboard());
        }
    }
    public void promptCycleDeletion(long chatId) {
        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤
        List<LocalDate> completedCycleEndDates = userCycleManagementService.findLastCompletedCycleEndDatesByChatId(chatId, 6);

        if (completedCycleEndDates.isEmpty()) {
            sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.");
            return;
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º —Ü–∏–∫–ª–æ–≤
        StringBuilder message = new StringBuilder("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ü–∏–∫–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:\n");
        for (int i = 0; i < completedCycleEndDates.size(); i++) {
            message.append(i + 1).append(". ").append(completedCycleEndDates.get(i)).append("\n");
        }

        sendMessage(chatId, message.toString());
        changeUserState(chatId, new
                AwaitingCycleDeletionState(cycleService, completedCycleEndDates,userCycleManagementService));  // –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    }


    public void handleHistoricalCycleData(long chatId) {
        // –ü–æ–ª—É—á–∞–µ–º –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ —Ü–∏–∫–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        List<LocalDate> completedCycleEndDates = userCycleManagementService.findLastCompletedCycleEndDatesByChatId(chatId, 6);
        int completedCyclesCount = completedCycleEndDates.size();

        if (completedCyclesCount >= 6) {
            // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å 6 –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            sendMessageWithKeyboard(chatId,
                    "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å 6 –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤. –í–≤–æ–¥ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.",
                    createCycleDatesKeyboard());
        } else {
            // –ï—Å–ª–∏ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤ –º–µ–Ω—å—à–µ 6, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤
            StringBuilder message = new StringBuilder("–í–∞—à–∏ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ —Ü–∏–∫–ª—ã:\n");
            for (int i = 0; i < completedCyclesCount; i++) {
                message.append(i + 1).append(". ").append(completedCycleEndDates.get(i)).append("\n");
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–º–∏ —Ü–∏–∫–ª–∞–º–∏
            sendMessage(chatId, message.toString());

            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ AwaitingHistoricalCycleDataState –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
            changeUserState(chatId, new AwaitingHistoricalCycleDataState(cycleService, userCycleManagementService, chatId));
            sendMessageWithKeyboard(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞:",createDataEntryChoiceKeyboard());
        }
    }


    private void handleStartCommand(long chatId, Update update) {
        if (!userService.existsById(chatId)) {
            User newUser = UserUtils.createNewUser(update);
            userService.save(newUser);
            log.info("New user created and saved for chatId {}", chatId);
        }
        sendMessageWithKeyboard(chatId, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –Ω–∞—á–∞–ª–∞.", createMenuKeyboard());
    }

    private void handleActiveCycleDataEntry(long chatId) {
        Optional<Cycle> activeCycle = cycleService.findActiveOrDelayedCycleByChatId(chatId);
        if (activeCycle.isPresent()) {
            Cycle existingCycle = activeCycle.get();
            String cycleInfo = String.format(
                    "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∏–ª–∏ –∑–∞–¥–µ—Ä–∂–∞–Ω–Ω—ã–π —Ü–∏–∫–ª:\n–ù–∞—á–∞–ª–æ —Ü–∏–∫–ª–∞: %s\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ü–∏–∫–ª–∞: %d –¥–Ω–µ–π\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏–∏: %d –¥–Ω–µ–π",
                    existingCycle.getStartDate(),
                    existingCycle.getCycleLength(),
                    existingCycle.getPeriodLength()
            );
            sendMessage(chatId, cycleInfo);
            sendMessageWithKeyboard(chatId,"–•–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ü–∏–∫–ª? ",createDeleteCycleConfirmationKeyboard());
            log.info("Existing cycle information sent to chatId {}", chatId);
        } else {
            changeUserState(chatId, new AwaitingStartDateState());
            sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –≤–∞—à–µ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ü–∏–∫–ª–∞:");
            log.info("AwaitingStartDateState set for chatId {}", chatId);
        }
    }

    private boolean isMainCommand(String messageText) {
        return messageText.equals("/start") ||
                messageText.equals("‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ") ||
                messageText.equals("üë§ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è") ||
                messageText.equals("üîÑ –ù–æ–≤—ã–π —Ü–∏–∫–ª") ||
                messageText.equals("r") ||
                messageText.equals("üìÜ –ö–∞–ª–µ–Ω–¥–∞—Ä—å") ||
                messageText.equals("üìÖ –¢–µ–∫—É—â–∏–π –¥–µ–Ω—å —Ü–∏–∫–ª–∞") ||
                messageText.equals("d") ||
                messageText.equals("–ù–∞–∑–∞–¥") ||
                messageText.equals("‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ") ||
                messageText.equals("–í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ü–∏–∫–ª–∞") ||
                messageText.equals("r") ||
                messageText.equals("–ó–∞–∫–æ–Ω—á–∏—Ç—å –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö") ||
                messageText.equals("–£–¥–∞–ª–∏—Ç—å –æ–¥–∏–Ω –∏–∑ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤") ||
                messageText.equals("i") ||

                messageText.equals("–í–≤–µ—Å—Ç–∏ –µ—â–µ –æ–¥–∏–Ω —Ü–∏–∫–ª") ||
                messageText.equals("–î–∞, —É–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ü–∏–∫–ª");


    }


    public void handleNewCycle(long chatId) {
        log.debug("Handling new cycle creation for chatId {}", chatId);

        Optional<Cycle> optionalCurrentCycle = cycleService.findActiveOrDelayedCycleByChatId(chatId);

        Cycle currentCycle = null;

        if (optionalCurrentCycle.isPresent()) {
            currentCycle = optionalCurrentCycle.get();
            int originalCycleLength = currentCycle.getCycleLength();

            currentCycle.setStatus(CycleStatus.COMPLETED);
            currentCycle.setEndDate(LocalDate.now());
            log.info("Completed current cycle with id {} for chatId {}", currentCycle.getCycleId(), chatId);

            cycleCalculator.recalculateCycleFieldsBasedOnEndDate(currentCycle);
            cycleService.save(currentCycle);
            log.info("Recalculated and saved completed cycle for chatId {}", chatId);

            Cycle newCycle = new Cycle();
            newCycle.setUser(currentCycle.getUser());
            newCycle.setStartDate(LocalDate.now());
            newCycle.setCycleLength(originalCycleLength);
            newCycle.setPeriodLength(currentCycle.getPeriodLength());
            newCycle.setStatus(CycleStatus.ACTIVE);

            cycleCalculator.calculateCycleFields(newCycle);
            cycleService.save(newCycle);
            log.info("New cycle created and saved with id {} for chatId {}", newCycle.getCycleId(), chatId);

            sendMessageWithKeyboard(chatId, "–ù–æ–≤—ã–π —Ü–∏–∫–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.", createMenuKeyboard());
            sendUndoMessage(chatId, newCycle.getCycleId());
            log.info("Undo message sent for new cycle with id {} for chatId {}", newCycle.getCycleId(), chatId);
        } else {
            sendMessage(chatId, "–ù–µ –Ω–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –∏–ª–∏ –∑–∞–¥–µ—Ä–∂–∞–Ω–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ.");
            log.warn("No active or delayed cycle found for new cycle creation in chatId {}", chatId);
        }
    }


    // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π "–¢—É—Ç"
    public void sendUndoMessage(long chatId, Long cycleId) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText("–í–∞—à —Ü–∏–∫–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω, –µ—Å–ª–∏ –≤—ã –æ—à–∏–±–ª–∏—Å—å, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ [–¢—É—Ç]");

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> buttons = new ArrayList<>();
        List<InlineKeyboardButton> row = new ArrayList<>();

        InlineKeyboardButton undoButton = new InlineKeyboardButton();
        undoButton.setText("–¢—É—Ç");
        undoButton.setCallbackData("undo_cycle_" + cycleId); // callbackData –≤–∫–ª—é—á–∞–µ—Ç ID —Ü–∏–∫–ª–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è

        row.add(undoButton);
        buttons.add(row);
        markup.setKeyboard(buttons);
        message.setReplyMarkup(markup);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }





    public void handleCurrentDay(long chatId) {
        try {
            int currentDay = userCycleManagementService.getCurrentDay(chatId);
            sendMessageWithKeyboard(chatId, "–°–µ–≥–æ–¥–Ω—è: " + currentDay + " –¥–µ–Ω—å —Ü–∏–∫–ª–∞.", createMenuKeyboard());

        } catch (IllegalArgumentException e) {
            sendMessageWithKeyboard(chatId, e.getMessage(), createMenuKeyboard());
        }
    }




    public String getUserSalutation(long chatId) {
        Optional<User> optionalUser = userService.findById(chatId);
        if (optionalUser.isEmpty()) {
            return "";
        }
        User user = optionalUser.get();
        return user.getSalutation() != null ? user.getSalutation() : user.getName();
    }




    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø—Ä–æ—Ñ–∏–ª—è.
     *
     * @param chatId –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ—Ñ–∏–ª—è.
     */
    public void handleProfileSettings(long chatId) {
        // –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
        InlineKeyboardMarkup keyboard = userEditService.getUserEditor(chatId);
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        sendMessageWithKeyboard(chatId, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è: ", keyboard);
    }


    public void changeUserState(long chatId, UserStateHandler newState) {
        synchronized (userStates) {  // –ë–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ userStates
            log.info("User state changed to '{}' for chatId {}", newState.getClass().getSimpleName(), chatId);
            userStates.put(chatId, newState);
        }
    }
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è.
     *
     * @param chatId –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å.
     */
    public void handleCalendar(long chatId) {
        try {
            sendMessage(chatId, "–í–∞—à –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ –æ–∫—Ç—è–±—Ä—å:");
            sendMessageWithKeyboard(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –Ω–∏–∂–µ:", calendarService.getCalendar(2024, 10, chatId));
        } catch (Exception e) {
            sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.");
        }
    }


    public void handleCallback(CallbackQuery callbackQuery) {
        String callbackData = callbackQuery.getData();
        long chatId = callbackQuery.getMessage().getChatId();

        log.debug("Handling callback with data '{}' from chatId {}", callbackData, chatId);

        try {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã —Ü–∏–∫–ª–∞
            if (callbackData.startsWith("undo_cycle_")) {
                Long cycleId = Long.parseLong(callbackData.split("_")[2]);
                Optional<Cycle> cycleOptional = cycleService.findById(cycleId);

                if (cycleOptional.isPresent()) {
                    cycleService.deleteCycleById(cycleId);
                    sendMessageWithKeyboard(chatId, "–¶–∏–∫–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω.", createMenuKeyboard());
                    log.info("Cycle with id {} successfully canceled for chatId {}", cycleId, chatId);
                } else {
                    sendMessage(chatId, "–û—à–∏–±–∫–∞: –¶–∏–∫–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.");
                    log.warn("Cycle with id {} not found for cancellation in chatId {}", cycleId, chatId);
                }
                return;
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –∫–æ–º–∞–Ω–¥
            switch (callbackData) {
                case "new_cycle":
                    handleNewCycle(chatId);
                    log.info("New cycle creation initiated for chatId {}", chatId);
                    break;

                case "edit_salutation":
                    userStates.put(chatId, new AwaitingSalutationState());
                    sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ:");
                    log.info("Set state to AwaitingSalutationState for chatId {}", chatId);
                    break;

                case "edit_birth_date":
                    userStates.put(chatId, new AwaitingBirthdateState());
                    sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î):");
                    log.info("Set state to AwaitingBirthdateState for chatId {}", chatId);
                    break;

                case "edit_time_zone":
                    userStates.put(chatId, new AwaitingTimezoneState());
                    sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ —Å–º–µ—â–µ–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +3 –¥–ª—è –ú–æ—Å–∫–≤—ã):");
                    log.info("Set state to AwaitingTimezoneState for chatId {}", chatId);
                    break;

                case "back_to_main_menu":
                    sendMessageWithKeyboard(chatId, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", createMenuKeyboard());
                    userStates.put(chatId, new NoneState());
                    log.info("Returned to main menu and reset state for chatId {}", chatId);
                    break;

                default:
                    sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
                    log.warn("Received unknown callback data '{}' from chatId {}", callbackData, chatId);
                    break;
            }
        } catch (Exception e) {
            log.error("Exception while handling callback '{}' from chatId {}", callbackData, chatId, e);
            sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.");
        }
    }



    public void sendMessage(long chatId, String text) {
        sendMessageWithKeyboard(chatId, text, null);
    }

    public void sendMessageWithKeyboard(long chatId, String text, ReplyKeyboard keyboardMarkup) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(text);
        if (keyboardMarkup != null) {
            message.setReplyMarkup(keyboardMarkup);
        }
        try {
            execute(message);
        } catch (TelegramApiException e) {
        }
    }





    /**
     * –£–¥–∞–ª—è–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
     *
     * @param chatId –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è.
     */
    public void deleteAllData(long chatId) {
        try {
            databaseService.deleteAllData();
            sendMessage(chatId, "–ë–∞–∑–∞ —Å—Ç–µ—Ä—Ç–∞");
            sendMessageWithKeyboard(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –Ω–∏–∂–µ:", createMenuKeyboard());
        } catch (Exception e) {
            sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.");
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –ø–µ—Ä–µ—Å—á—ë—Ç–∞ —Ü–∏–∫–ª–æ–≤
     */
    public void handleRecalculationCommand(long chatId) {
        try {
            cycleRecalculationService.recalculateAndUpdateCycles(); // –ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ—Å—á—ë—Ç–∞ —Ü–∏–∫–ª–æ–≤
            sendMessage(chatId, "–ü–µ—Ä–µ—Å—á—ë—Ç —Ü–∏–∫–ª–æ–≤ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω.");
        } catch (Exception e) {
            sendMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—á—ë—Ç–µ —Ü–∏–∫–ª–æ–≤: " + e.getMessage());
        }
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ—Ç–∞.
     *
     * @return –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ—Ç–∞.
     */
    @Override
    public String getBotUsername() {
        return botUsername;
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–∫–µ–Ω –±–æ—Ç–∞.
     *
     * @return –¢–æ–∫–µ–Ω –±–æ—Ç–∞.
     */
    @Override
    public String getBotToken() {
        return botToken;
    }


}
