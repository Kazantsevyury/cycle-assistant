package com.example.menstrualcyclebot.presentation;

import com.example.menstrualcyclebot.domain.Cycle;
import com.example.menstrualcyclebot.domain.User;
import com.example.menstrualcyclebot.service.CalendarService;
import com.example.menstrualcyclebot.service.UserEditService;
import com.example.menstrualcyclebot.service.sbservices.CycleService;
import com.example.menstrualcyclebot.service.sbservices.DatabaseService;
import com.example.menstrualcyclebot.service.sbservices.UserCycleManagementService;
import com.example.menstrualcyclebot.service.sbservices.UserService;
import com.example.menstrualcyclebot.utils.UIUtils;
import com.example.menstrualcyclebot.utils.UserState;
import jakarta.annotation.PreDestroy;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.transaction.annotation.Transactional;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboard;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import com.example.menstrualcyclebot.utils.CycleCalculator;

import java.time.LocalDate;
import java.time.format.DateTimeParseException;
import java.util.*;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

import static com.example.menstrualcyclebot.utils.UIUtils.createMenuKeyboard;
import static com.example.menstrualcyclebot.utils.UserState.*;


@Slf4j
public class Bot extends TelegramLongPollingBot {

    private final String botToken;
    private final String botUsername;

    private final UserService userService;
    private final CycleService cycleService;
    private final UserCycleManagementService userCycleManagementService;

    private final CalendarService calendarService;
    private final DatabaseService databaseService;
    private final CycleCalculator cycleCalculator;
    private final UserEditService userEditService;

    private final ExecutorService executorService = Executors.newFixedThreadPool(10); // –ù–∞—Å—Ç—Ä–æ–π –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤

    private final Map<Long, Cycle> dataEntrySessions = new HashMap<>();

    private final Map<Long, UserState> userStates = new HashMap<>();


    private final Map<Long, Cycle> partialCycleData = new HashMap<>();

    public Bot(String botToken, String botUsername, UserService userService, CycleService cycleService, UserCycleManagementService userCycleManagementService, CalendarService calendarService, DatabaseService databaseService, CycleCalculator cycleCalculator, UserEditService userEditService) {
        this.botToken = botToken;
        this.botUsername = botUsername;
        this.userService = userService;
        this.cycleService = cycleService;
        this.userCycleManagementService = userCycleManagementService;
        this.calendarService = calendarService;
        this.databaseService = databaseService;
        this.cycleCalculator = cycleCalculator;
        this.userEditService = userEditService;
    }


    private void processUpdate(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            handleIncomingMessage(update);
        } else if (update.hasCallbackQuery()) {
            handleCallback(update.getCallbackQuery());
        }
    }

    @Override
    public void onUpdateReceived(Update update) {
        executorService.submit(() -> processUpdate(update)); // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ –∞–ø–¥–µ–π—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    }


    private void handleIncomingMessage(Update update) {
        long chatId = update.getMessage().getChatId();
        String messageText = update.getMessage().getText();

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
            if (userStates.containsKey(chatId) && userStates.get(chatId) != UserState.NONE) {
                handleDataEntrySteps(update, messageText);
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            if (!userService.existsById(chatId)) {
                log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å chatId {} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", chatId);
                User newUser = new User();
                newUser.setChatId(chatId);
                newUser.setUsername(update.getMessage().getFrom().getUserName());
                // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏, –µ—Å–ª–∏ –æ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
                if (update.getMessage().getFrom().getFirstName() != null) {
                    newUser.setSalutation(update.getMessage().getFrom().getFirstName());
                } else {
                    newUser.setSalutation(newUser.getUsername());
                }
                userService.save(newUser);
            }

            // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            Optional<User> optionalUser = userService.findById(chatId);
            User user = optionalUser.orElseThrow(() -> new IllegalStateException("User not found for chatId: " + chatId));
            String salutation = user.getSalutation() != null ? user.getSalutation() : user.getName();

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
            switch (messageText) {
                case "/start":
                    log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å chatId {} –Ω–∞—á–∞–ª –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º.", chatId);
                    sendMessageWithKeyboard(chatId, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –Ω–∞—á–∞–ª–∞.", createMenuKeyboard());
                    break;
                case "‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ":
                    handleDataEntry(chatId);
                    log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å chatId {} –≤—ã–±—Ä–∞–ª –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö.", chatId);
                    sendMessage(chatId, "–•–æ—Ä–æ—à–æ, " + salutation + ", –ø—Ä–∏—Å—Ç—É–ø–∏–º –∫ –≤–≤–æ–¥—É –¥–∞–Ω–Ω—ã—Ö.");
                    break;
                case "üí° –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é":
                    log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å chatId {} –∑–∞–ø—Ä–æ—Å–∏–ª —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é.", chatId);
                    handleRecommendation(chatId);
                    break;
                case "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
                    log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å chatId {} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.", chatId);
                    handleStatistics(chatId);
                    break;
                case "üìÖ –¢–µ–∫—É—â–∏–π –¥–µ–Ω—å —Ü–∏–∫–ª–∞":
                    log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å chatId {} –∑–∞–ø—Ä–æ—Å–∏–ª —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å —Ü–∏–∫–ª–∞.", chatId);
                    handleCurrentDay(chatId);
                    break;
                case "üë§ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è":
                    log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å chatId {} –≤—ã–±—Ä–∞–ª –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø—Ä–æ—Ñ–∏–ª—è.", chatId);
                    handleProfileSettings(chatId);
                    break;
                case "üîî –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è":
                    log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å chatId {} –≤—ã–±—Ä–∞–ª –Ω–∞—Å—Ç—Ä–æ–π–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.", chatId);
                    handleNotificationSettings(chatId);
                    break;
                case "üìÜ –ö–∞–ª–µ–Ω–¥–∞—Ä—å":
                    log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å chatId {} –∑–∞–ø—Ä–æ—Å–∏–ª –∫–∞–ª–µ–Ω–¥–∞—Ä—å.", chatId);
                    handleCalendar(chatId);
                    break;
                case "üîÑ –ù–æ–≤—ã–π —Ü–∏–∫–ª":
                    log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å chatId {} –Ω–∞—á–∞–ª –Ω–æ–≤—ã–π —Ü–∏–∫–ª.", chatId);
                    handleNewCycle(chatId);
                    break;
                case "–£–¥–∞–ª–∏—Ç—å –±–∞–∑—É":
                    log.warn("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å chatId {} –∑–∞–ø—Ä–æ—Å–∏–ª —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.", chatId);
                    deleteAllData(chatId);
                    break;
                default:
                    log.warn("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å chatId {} –≤–≤–µ–ª –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É: {}", chatId, messageText);
                    sendMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, " + salutation + ". –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
            }
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å chatId {}: {}", chatId, e.getMessage(), e);
            sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.");
        }
    }



    private void deleteAllData(long chatId) {
        try {
            log.info("–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å chatId {}", chatId);
            databaseService.deleteAllData();
            sendMessage(chatId, "–ë–∞–∑–∞ —Å—Ç–µ—Ä—Ç–∞");
            sendMessageWithKeyboard(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –Ω–∏–∂–µ:", createMenuKeyboard());
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å chatId {}: {}", chatId, e.getMessage(), e);
            sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.");
        }
    }

    private void handleDataEntry(long chatId) {
        log.info("[handleDataEntry] Starting data entry for user with chatId: {}", chatId);
        userStates.put(chatId, UserState.AWAITING_CYCLE_LENGTH);
        partialCycleData.put(chatId, new Cycle());
        sendMessage(chatId, "Please enter your cycle length (in days):");
    }
    @Transactional
    private void handleDataEntrySteps(Update update, String messageText) {
        long chatId = update.getMessage().getChatId();
        UserState currentState = userStates.get(chatId);
        Cycle cycle = partialCycleData.get(chatId);

        log.info("[handleDataEntrySteps] –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å chatId: {}. –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {}", chatId, currentState);

        try {
            switch (currentState) {
                case AWAITING_CYCLE_LENGTH:
                    processCycleLength(chatId, messageText, cycle);
                    break;
                case AWAITING_PERIOD_LENGTH:
                    processPeriodLength(chatId, messageText, cycle);
                    break;
                case AWAITING_START_DATE:
                    processStartDate(chatId, messageText, cycle);
                    break;
                default:
                    handleUnexpectedState(chatId, currentState);
                    break;
            }
        } catch (NumberFormatException e) {
            log.error("[handleDataEntrySteps] –ù–µ–≤–µ—Ä–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç, –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å chatId: {}. –í–≤–æ–¥: {}", chatId, messageText, e);
            sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.");
        } catch (DateTimeParseException e) {
            log.error("[handleDataEntrySteps] –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã, –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å chatId: {}. –í–≤–æ–¥: {}", chatId, messageText, e);
            sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î.");
        } catch (Exception e) {
            log.error("[handleDataEntrySteps] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å chatId: {}. –û—à–∏–±–∫–∞: {}", chatId, e.getMessage(), e);
            sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
            clearUserData(chatId);
        }
    }

    private void processCycleLength(long chatId, String messageText, Cycle cycle) {
        int cycleLength = Integer.parseInt(messageText);
        if (cycleLength <= 0) {
            log.warn("[processCycleLength] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å chatId: {} –≤–≤–µ–ª –Ω–µ–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é –¥–ª–∏–Ω—É —Ü–∏–∫–ª–∞: {}", chatId, cycleLength);
            sendMessage(chatId, "–î–ª–∏–Ω–∞ —Ü–∏–∫–ª–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:");
            return;
        }
        cycle.setCycleLength(cycleLength);
        userStates.put(chatId, UserState.AWAITING_PERIOD_LENGTH);
        sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É –≤–∞—à–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ (–≤ –¥–Ω—è—Ö):");
    }

    private void processPeriodLength(long chatId, String messageText, Cycle cycle) {
        int periodLength = Integer.parseInt(messageText);
        if (periodLength <= 0) {
            log.warn("[processPeriodLength] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å chatId: {} –≤–≤–µ–ª –Ω–µ–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é –¥–ª–∏–Ω—É –ø–µ—Ä–∏–æ–¥–∞: {}", chatId, periodLength);
            sendMessage(chatId, "–î–ª–∏–Ω–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:");
            return;
        }
        cycle.setPeriodLength(periodLength);
        userStates.put(chatId, UserState.AWAITING_START_DATE);
        sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –≤–∞—à–µ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ü–∏–∫–ª–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î):");
    }

    private void processStartDate(long chatId, String messageText, Cycle cycle) {
        LocalDate startDate = LocalDate.parse(messageText);
        if (startDate.isAfter(LocalDate.now())) {
            log.warn("[processStartDate] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å chatId: {} –≤–≤–µ–ª –¥–∞—Ç—É –≤ –±—É–¥—É—â–µ–º: {}", chatId, startDate);
            sendMessage(chatId, "–î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É:");
            return;
        }
        cycle.setStartDate(startDate);
        completeDataEntry(chatId, cycle);
    }

    private void completeDataEntry(long chatId, Cycle cycle) {
        try {
            userStates.put(chatId, UserState.NONE);

            log.info("[completeDataEntry] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ü–∏–∫–ª–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å chatId: {}", chatId);
            Optional<User> optionalUser = userService.findById(chatId);
            if (optionalUser.isPresent()) {
                cycle.setUser(optionalUser.get());
            } else {
                throw new IllegalStateException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è chatId: " + chatId);
            }
            cycleCalculator.calculateCycleFields(cycle);
            cycleService.save(cycle);

            sendMessage(chatId, "–°–ø–∞—Å–∏–±–æ! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.");
            sendMessageWithKeyboard(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é:", createMenuKeyboard());

            partialCycleData.remove(chatId);
            log.info("[completeDataEntry] –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ü–∏–∫–ª–∞ –æ—á–∏—â–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å chatId: {}", chatId);
        } catch (Exception e) {
            log.error("[completeDataEntry] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å chatId: {}. –û—à–∏–±–∫–∞: {}", chatId, e.getMessage(), e);
            sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
    }

    private void handleUnexpectedState(long chatId, UserState currentState) {
        log.warn("[handleUnexpectedState] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å chatId: {} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏: {}", chatId, currentState);
        sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é.");
        userStates.put(chatId, UserState.NONE);
    }

    private void clearUserData(long chatId) {
        log.info("[clearUserData] –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å chatId: {}", chatId);
        userStates.remove(chatId);
        partialCycleData.remove(chatId);
    }

    private void handleRecommendation(long chatId) {
        log.info("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∑–∞–ø—Ä–æ—à–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å chatId {}", chatId);
        sendMessageWithKeyboard(chatId, "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.", createMenuKeyboard());
    }

    private void handleStatistics(long chatId) {
        log.info("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–ø—Ä–æ—à–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å chatId {}", chatId);
        sendMessageWithKeyboard(chatId, "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è: –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.", createMenuKeyboard());
    }

    private void handleCurrentDay(long chatId) {
        Optional<User> optionalUser = userService.findById(chatId);

        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ü–∏–∫–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        List<Cycle> cycles = optionalUser
                .map(User::getCycles)
                .orElse(Collections.emptyList());

        try {
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ü–∏–∫–ª
            Cycle actualCycle = cycleService.getActualCycle(cycles);

            // –í—ã—á–∏—Å–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å —Ü–∏–∫–ª–∞
            LocalDate today = LocalDate.now();
            int currentDay = (int) (today.toEpochDay() - actualCycle.getStartDate().toEpochDay()) + 1;

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —Ç–µ–∫—É—â–∏–º –¥–Ω–µ–º —Ü–∏–∫–ª–∞
            sendMessageWithKeyboard(chatId, "–°–µ–≥–æ–¥–Ω—è: " + currentDay + " –¥–µ–Ω—å —Ü–∏–∫–ª–∞.", createMenuKeyboard());

        } catch (IllegalArgumentException e) {
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤ –Ω–µ—Ç
            sendMessageWithKeyboard(chatId, e.getMessage(), createMenuKeyboard());
        }
    }


    private void handleProfileSettings(long chatId) {
        log.info("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –∑–∞–ø—Ä–æ—à–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å chatId {}", chatId);

        // –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
        InlineKeyboardMarkup keyboard = userEditService.getUserEditor(chatId);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        sendMessageWithKeyboard(chatId, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è: " , keyboard);
    }


    private void handleNotificationSettings(long chatId) {
        log.info("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–ø—Ä–æ—à–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å chatId {}", chatId);
        sendMessageWithKeyboard(chatId, "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.", createMenuKeyboard());
    }

    @Transactional
    private void handleCalendar(long chatId) {
        try {
            log.info("–ó–∞–ø—Ä–æ—à–µ–Ω –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å chatId {}", chatId);
            sendMessage(chatId, "–í–∞—à –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ –æ–∫—Ç—è–±—Ä—å:");
            sendMessageWithKeyboard(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –Ω–∏–∂–µ:", calendarService.getCalendar(2024, 10, chatId));
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å chatId {}: {}", chatId, e.getMessage(), e);
            sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.");
        }
    }

    private void handleCallback(CallbackQuery callbackQuery) {
        String callbackData = callbackQuery.getData();
        long chatId = callbackQuery.getMessage().getChatId();

        try {
            if (callbackData.startsWith("navigate:")) {
                String[] data = callbackData.split(":");
                int year = Integer.parseInt(data[1]);
                int month = Integer.parseInt(data[2]);

                log.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å chatId {}: –≥–æ–¥ {}, –º–µ—Å—è—Ü {}", chatId, year, month);

                EditMessageText editMessage = new EditMessageText();
                editMessage.setChatId(String.valueOf(chatId));
                editMessage.setMessageId(callbackQuery.getMessage().getMessageId());
                editMessage.setText("–ö–∞–ª–µ–Ω–¥–∞—Ä—å:");
                editMessage.setReplyMarkup(calendarService.getCalendar(year, month, chatId));

                execute(editMessage);
            }
        } catch (NumberFormatException e) {
            log.error("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —á–∏—Å–ª–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å chatId {}: {}", chatId, e.getMessage(), e);
            sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å chatId {}: {}", chatId, e.getMessage(), e);
            sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.");
        }
    }

    private void handleNewCycle(long chatId) {
        log.info("–ù–∞—á–∞—Ç –Ω–æ–≤—ã–π —Ü–∏–∫–ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å chatId {}", chatId);
        sendMessageWithKeyboard(chatId, "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è: –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ü–∏–∫–ª.", createMenuKeyboard());
    }

    private void sendMessage(long chatId, String text) {
        sendMessageWithKeyboard(chatId, text, null);
    }

    private void sendMessageWithKeyboard(long chatId, String text, ReplyKeyboard keyboardMarkup) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(text);
        if (keyboardMarkup != null) {
            message.setReplyMarkup(keyboardMarkup);
        }
        try {
            execute(message);
        } catch (TelegramApiException e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å chatId {}: {}", chatId, e.getMessage(), e);
        }
    }

    @Override
    public String getBotUsername() {
        return botUsername;
    }

    @Override
    public String getBotToken() {
        return botToken;
    }

    @PreDestroy
    public void shutDown() {
        log.info("–ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É ExecutorService...");
        executorService.shutdown();  // –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ ExecutorService
        try {
            if (!executorService.awaitTermination(60, TimeUnit.SECONDS)) {
                executorService.shutdownNow();  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ, –µ—Å–ª–∏ –¥–æ–ª–≥–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è
            }
        } catch (InterruptedException e) {
            executorService.shutdownNow();
        }
    }
}
